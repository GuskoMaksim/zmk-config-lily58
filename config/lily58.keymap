/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };

        ChangeLeng {
            bindings = <&kp LG(TAB)>;
            key-positions = <29 30>;
        };

        Esc {
            bindings = <&kp ESC>;
            key-positions = <28 31>;
        };
    };

    behaviors {
        ss_hs_modmorph: ss_hs_modmorph {
            compatible = "zmk,behavior-mod-morph";
            label = "SS_HS_MODMORPH";
            bindings = <&kp M>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        kh_hs_tapdance: kh_hs_tapdance {
            compatible = "zmk,behavior-tap-dance";
            label = "KH_HS_TAPDANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>;
        };

        hrm: hrm {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;
        };

        hml: homewrow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <6 10 11 18 19 20 21 22 23 30 31 32 33 34 35 44 45 46 47 48 49 55 56 57 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 43 44 45 46 47 48 49 54 55 56 57>;
        };

        hmr: homewrow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41 42 50 51 52 53>;
        };
    };

    macros {
        pass: new_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp NUMBER_2 &kp N5 &kp NUMBER_1 &kp NUMBER_2 &kp N0 &kp NUMBER_2 &kp N5 &kp NUMBER_1 &kp NUMBER_2 &kp N0 &kp LS(G) &kp U &kp G &kp S>;
            label = "NEW_MACRO";
        };

        next_word: next_word {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(RIGHT)>;
            label = "NEXT_WORD";
        };

        previous_word: previous_word {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LEFT)>;
            label = "PREVIOUS_WORD";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   `   |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   -   |
            // |  CTRL |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |   "["  |  |  "]"  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //                     | ALT  | GUI  | LOWER|  SPACE |  | ENTER | RAISE| BSPC  | GUI   |

            bindings = <
&hrm F1 ESC       &kp F2  &kp F3  &kp F4        &kp F5        &kp F6                         &kp F7  &kp F8    &kp F9     &kp F10  &kp F11   &kp F12
&kp TAB           &kp Q   &kp W   &kp E         &kp R         &kp T                          &kp Y   &kp U     &kp I      &kp O    &kp P     &kp LEFT_BRACKET
&kp LEFT_SHIFT    &kp A   &kp S   &kp D         &kp F         &kp G                          &kp H   &kp J     &kp K      &kp L    &kp SEMI  &kp SQT
&kp LEFT_CONTROL  &kp Z   &kp X   &kp C         &kp V         &kp B   &kp GRAVE    &kp PIPE  &kp N   &kp M     &kp COMMA  &kp DOT  &kp FSLH  &kp RIGHT_BRACKET
                                  &kp LEFT_WIN  &kp LEFT_ALT  &mo 1   &kp SPACE    &kp RET   &mo 2   &kp BSPC  &kp DEL
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        lower {
            bindings = <
&kp F1   &kp F2            &kp F3          &kp F4        &kp F5      &kp F6                                  &kp F7           &kp F8  &kp F9        &kp F10  &kp F11    &kp F12
&trans   &kp TAB           &kp HOME        &kp UP        &kp END     &kp INSERT                              &kp PAGE_UP      &kp N7  &kp N8        &kp N9   &kp PLUS   &kp MINUS
&kp ESC  &kp LEFT_SHIFT    &kp LEFT        &kp DOWN      &kp RIGHT   &kp ENTER                               &kp PAGE_DOWN    &kp N4  &kp N5        &kp N6   &kp STAR   &kp SLASH
&trans   &kp LEFT_CONTROL  &previous_word  &kp CAPSLOCK  &next_word  &kp DELETE  &trans    &kp BACKSPACE     &kp PRINTSCREEN  &kp N1  &kp N2        &kp N3   &kp EQUAL  &trans
                                           &trans        &trans      &trans      &trans    &hrm ENTER SPACE  &trans           &kp N0  &kp LEFT_ALT
            >;
        };

        Raise {
            bindings = <
&trans  &trans    &kp AT_SIGN           &kp DOLLAR             &kp POUND  &trans                       &trans       &trans          &kp CARET         &trans             &trans           &trans
&trans  &trans    &kp LESS_THAN         &kp GREATER_THAN       &kp EQUAL  &kp GRAVE                    &trans       &kp UNDERSCORE  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &trans           &trans
&trans  &kp BSLH  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp COLON  &kp EQUAL                    &kp PERCENT  &kp SEMICOLON   &kp LEFT_BRACE    &kp RIGHT_BRACE    &kp EXCLAMATION  &trans
&trans  &trans    &kp ASTRK             &kp MINUS              &kp PLUS   &kp SLASH  &trans    &trans  &trans       &kp PIPE        &kp TILDE         &kp AMPERSAND      &trans           &trans
                                        &trans                 &trans     &trans     &trans    &trans  &trans       &trans          &trans
            >;
        };

        Both {
            bindings = <
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2       &bt BT_SEL 3     &bt BT_SEL 4                    &trans  &ext_power EP_ON  &ext_power EP_OFF  &ext_power EP_TOG  &trans  &trans
&trans      &trans        &kp K_MUTE    &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &trans                          &trans  &kp K_LOCK        &kp K_SLEEP        &trans             &trans  &trans
&none       &trans        &trans        &trans             &trans           &trans                          &trans  &trans            &trans             &trans             &trans  &trans
&trans      &trans        &trans        &trans             &trans           &trans        &trans    &trans  &trans  &trans            &trans             &trans             &trans  &trans
                                        &trans             &trans           &trans        &trans    &trans  &trans  &trans            &trans
            >;
        };

        Def_without_home {
            bindings = <
&hrm F1 ESC       &kp F2  &kp F3  &kp F4        &kp F5        &kp F6                         &kp F7  &kp F8    &kp F9     &kp F10  &kp F11   &kp F12
&kp TAB           &kp Q   &kp W   &kp E         &kp R         &kp T                          &kp Y   &kp U     &kp I      &kp O    &kp P     &kp LEFT_BRACKET
&kp LEFT_SHIFT    &kp A   &kp S   &kp D         &kp F         &kp G                          &kp H   &kp J     &kp K      &kp L    &kp SEMI  &kp SQT
&kp LEFT_CONTROL  &kp Z   &kp X   &kp C         &kp V         &kp B   &kp GRAVE    &kp PIPE  &kp N   &kp M     &kp COMMA  &kp DOT  &kp FSLH  &kp RIGHT_BRACKET
                                  &kp LEFT_WIN  &kp LEFT_ALT  &mo 1   &kp SPACE    &kp RET   &mo 2   &kp BSPC  &kp DEL
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        both {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
